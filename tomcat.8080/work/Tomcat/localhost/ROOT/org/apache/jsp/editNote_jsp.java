/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-21 16:22:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import ucl.ac.uk.classes.*;

public final class editNote_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("ucl.ac.uk.classes");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    ");

        Note note = (Note) request.getAttribute("note");
    
      out.write("\r\n");
      out.write("    <title>edit ");
      out.print(note.getName());
      out.write("</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.print( request.getContextPath() );
      out.write("/styles.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.print( request.getContextPath() );
      out.write("/editing.css\">\r\n");
      out.write("    <style>\r\n");
      out.write("        .image-block {\r\n");
      out.write("            margin: 5px;\r\n");
      out.write("        }\r\n");
      out.write("        button {\r\n");
      out.write("            border-radius: 0;\r\n");
      out.write("        }\r\n");
      out.write("        .add-block-select {\r\n");
      out.write("            border-radius: 0;\r\n");
      out.write("        }\r\n");
      out.write("        .browse-button {\r\n");
      out.write("            border-radius: 0;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<script>\r\n");
      out.write("    function updateBlockType() {\r\n");
      out.write("        document.getElementById('newBlockType').value = document.getElementById('blockType').value;\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"note-container\">\r\n");
      out.write("    <div class=\"metadata\">\r\n");
      out.write("        <b>created:</b> ");
      out.print( note.getCreatedAtReadable() );
      out.write("\r\n");
      out.write("        <br>\r\n");
      out.write("        <b>last edited:</b> ");
      out.print( note.getLastEditedReadable() );
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <form action=\"");
      out.print( request.getContextPath() );
      out.write("/editNote");
      out.print( request.getAttribute("pathString") );
      out.write("\" method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("        <div class=\"name-container\">\r\n");
      out.write("            <input type=\"text\" id=\"name\" name=\"name\" value=\"");
      out.print( note.getName() );
      out.write("\" placeholder=\"enter name\"/>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"top-buttons-container\">\r\n");
      out.write("            <input type=\"hidden\" id=\"newBlockType\"  name=\"newBlockType\" value=\"text\">\r\n");
      out.write("            <select class=\"add-block-select\" title=\"select block type to add\" id=\"blockType\" onchange=\"updateBlockType()\">\r\n");
      out.write("                <option value=\"text\">text</option>\r\n");
      out.write("                <option value=\"image\">image</option>\r\n");
      out.write("                <option value=\"url\">url</option>\r\n");
      out.write("            </select>\r\n");
      out.write("            <button class=\"add-block-button\" type=\"submit\" title=\"add a new block at the bottom\" name=\"addBlock\">+</button>\r\n");
      out.write("            <div class=\"spacer\"></div>\r\n");
      out.write("            <button class=\"save-button\" type=\"submit\" title=\"save changes\">save</button>\r\n");
      out.write("        </div>\r\n");
      out.write("        ");

            String blockLabel;
            for (Block b : note.getBlocksList()) {
                blockLabel = "";
                if (b instanceof TextBlock)
                    blockLabel = "text";
                else if (b instanceof ImageBlock)
                    blockLabel = "image";
                else if (b instanceof URLBlock)
                    blockLabel = "url";
        
      out.write("\r\n");
      out.write("        <div class=\"block\">\r\n");
      out.write("            <div class=\"block-header\">\r\n");
      out.write("                <div class=\"block-label\">");
      out.print( blockLabel );
      out.write("</div>\r\n");
      out.write("                <div class=\"block-buttons\">\r\n");
      out.write("                    <button class=\"block-button\" type=\"submit\" name=\"moveBlockUp\" title=\"move block up\" value=\"");
      out.print( b.getId() );
      out.write("\">ðŸ¡©</button>\r\n");
      out.write("                    <button class=\"block-button\" type=\"submit\" name=\"moveBlockDown\" title=\"move block down\" value=\"");
      out.print( b.getId() );
      out.write("\">ðŸ¡«</button>\r\n");
      out.write("                    <button class=\"block-button\" type=\"submit\" name=\"addBlockAbove\" title=\"insert a block above\" value=\"");
      out.print( b.getId() );
      out.write("\">+ðŸ¡©</button>\r\n");
      out.write("                    <button class=\"block-button\" type=\"submit\" name=\"addBlockBeneath\" title=\"insert a block beneath\" value=\"");
      out.print( b.getId() );
      out.write("\">+ðŸ¡«</button>\r\n");
      out.write("                    <button class=\"block-button\" type=\"submit\" name=\"deleteBlock\" title=\"delete block\" value=\"");
      out.print( b.getId() );
      out.write("\">âœ–</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            ");
 if (b instanceof TextBlock) { 
      out.write("\r\n");
      out.write("                <textarea name=\"block_");
      out.print( b.getId() );
      out.write("\" placeholder=\"enter text\">");
      out.print( ((TextBlock) b).getText() );
      out.write("</textarea>\r\n");
      out.write("            ");
 } else if (b instanceof ImageBlock) { 
      out.write("\r\n");
      out.write("                <div class=\"image-block\">\r\n");
      out.write("                    <p>");
      out.print( ((ImageBlock) b).getImagePath() );
      out.write("</p>\r\n");
      out.write("                    <input class=\"browse-button\" type=\"file\" name=\"imageUpload_");
      out.print( b.getId() );
      out.write("\" accept=\"image/*\">\r\n");
      out.write("                </div>\r\n");
      out.write("            ");
 } else if (b instanceof URLBlock) { 
      out.write("\r\n");
      out.write("                <textarea name=\"block_");
      out.print( b.getId() );
      out.write("\" placeholder=\"enter url\">");
      out.print( ((URLBlock) b).getURL() );
      out.write("</textarea>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("    </form>\r\n");
      out.write("    <div class=\"bottom-buttons-container\">\r\n");
      out.write("        <form action=\"");
      out.print( request.getContextPath() );
      out.write("/displayNote");
      out.print( request.getAttribute("pathString") );
      out.write("\" method=\"get\">\r\n");
      out.write("            <button class=\"btn\" title=\"return to note display\" id=\"back\">back</button>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
