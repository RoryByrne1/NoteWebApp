/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-23 23:56:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import ucl.ac.uk.classes.Item;
import ucl.ac.uk.classes.Note;
import ucl.ac.uk.classes.Folder;

public final class displayFolder_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(6);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("ucl.ac.uk.classes.Note");
    _jspx_imports_classes.add("ucl.ac.uk.classes.Item");
    _jspx_imports_classes.add("ucl.ac.uk.classes.Folder");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    ");

        String folderName = (String) request.getAttribute("folderName");
    
      out.write("\r\n");
      out.write("    <title>");
      out.print(folderName.equals("root")? "my notes" : folderName);
      out.write("</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.print( request.getContextPath() );
      out.write("/styles.css\">\r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp", out, false);
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div>\r\n");
      out.write("    ");

        String pathString = (String) request.getAttribute("pathString");
        String[] pathComponents = pathString == null || pathString.isEmpty() ? new String[0] : pathString.substring(1).split("/");
        List<Item> contentsList = (List<Item>) request.getAttribute("contentsList");
        String sortBy = (String) request.getAttribute("sortBy");
        boolean ascending = (boolean) request.getAttribute("ascending");
        String parameters =  "?sort=" + sortBy + "&order=" + (ascending ? "asc" : "desc");
    
      out.write("\r\n");
      out.write("    <h1>");
      out.print( folderName.equals("root") ? "my notes" : folderName );
      out.write("</h1>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"time-details\">\r\n");
      out.write("        created: ");
      out.print( request.getAttribute("folderCreatedAt") );
      out.write(" | last modified: ");
      out.print( request.getAttribute("folderLastEdited") );
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"breadcrumbs\">\r\n");
      out.write("        <a class=\"nice-link\" href=\"");
      out.print( request.getContextPath() );
      out.write("/displayFolder");
      out.print( parameters );
      out.write("\">üìÅ</a> /\r\n");
      out.write("        ");

            StringBuilder cumulativePath = new StringBuilder();
            for (int i = 0; i < pathComponents.length; i++) {
                cumulativePath.append("/").append(pathComponents[i]);
        
      out.write("\r\n");
      out.write("        <a class=\"nice-link\" href=\"");
      out.print( request.getContextPath() );
      out.write("/displayFolder");
      out.print( cumulativePath + parameters);
      out.write('"');
      out.write('>');
      out.print( pathComponents[i].replace("-", " "));
      out.write("</a> /\r\n");
      out.write("        ");

            }
        
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    ");

        String nextOrder = ascending ? "desc" : "asc";
    
      out.write("\r\n");
      out.write("    <div class=\"table-container\">\r\n");
      out.write("        <table>\r\n");
      out.write("            <thead>\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <th class=\"table-item\"><a class=\"nice-link\" href=\"?sort=name&order=");
      out.print( sortBy.equals("name") ? nextOrder : "asc" );
      out.write("\">\r\n");
      out.write("                        name ");
      out.print( sortBy.equals("name") ? (ascending ? "‚Üë" : "‚Üì") : "" );
      out.write("\r\n");
      out.write("                    </a></th>\r\n");
      out.write("                    <th class=\"table-edited\"><a class=\"nice-link\" href=\"?sort=lastEdited&order=");
      out.print( sortBy.equals("lastEdited") ? nextOrder : "asc" );
      out.write("\">\r\n");
      out.write("                        last modified ");
      out.print( sortBy.equals("lastEdited") ? (ascending ? "‚Üë" : "‚Üì") : "" );
      out.write("\r\n");
      out.write("                    </a></th>\r\n");
      out.write("                    <th class=\"table-created\"><a class=\"nice-link\" href=\"?sort=createdAt&order=");
      out.print( sortBy.equals("createdAt") ? nextOrder : "asc" );
      out.write("\">\r\n");
      out.write("                        created ");
      out.print( sortBy.equals("createdAt") ? (ascending ? "‚Üë" : "‚Üì") : "" );
      out.write("\r\n");
      out.write("                    </a></th>\r\n");
      out.write("                </tr>\r\n");
      out.write("            </thead>\r\n");
      out.write("            <tbody>\r\n");
      out.write("            ");
 for (Item item : contentsList) { 
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                ");
 if (item instanceof Note) { 
      out.write("\r\n");
      out.write("                <td class=\"table-item\"><a class=\"nice-link\" href=\"");
      out.print( request.getContextPath() );
      out.write("/displayNote");
      out.print( pathString + "/" + item.getId() );
      out.write("\">üìÑ ");
      out.print( item.getName() );
      out.write("</a></td>\r\n");
      out.write("                ");
 } else if (item instanceof Folder) { 
      out.write("\r\n");
      out.write("                <td class=\"table-item\"><a class=\"nice-link\" href=\"");
      out.print( request.getContextPath() );
      out.write("/displayFolder");
      out.print( pathString + "/" + item.getId() );
      out.write("\">üìÅ ");
      out.print( item.getName() );
      out.write("</a></td>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("                <td class=\"table-edited\"><div class=\"table-date-body\">");
      out.print( item.getLastEditedReadable(true) );
      out.write("</div></td>\r\n");
      out.write("                <td class=\"table-created\"><div class=\"table-date-body\">");
      out.print( item.getCreatedAtReadable(true) );
      out.write("</div></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("            </tbody>\r\n");
      out.write("        </table>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        function addFolder() {\r\n");
      out.write("            let folderName = prompt(\"enter folder name:\");\r\n");
      out.write("            if (folderName) {\r\n");
      out.write("                window.location.href = \"");
      out.print( request.getContextPath() );
      out.write("/createFolder");
      out.print( pathString + parameters);
      out.write("&folderName=\" + encodeURIComponent(folderName);\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        function addNote() {\r\n");
      out.write("            window.location.href = \"");
      out.print( request.getContextPath() );
      out.write("/createNote");
      out.print( pathString);
      out.write("?noteName=untitled\";\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("    <button type=\"button\" title=\"create a new folder in this folder\" onclick=\"addFolder()\">add folder</button>\r\n");
      out.write("    <button type=\"button\" title=\"create a new note in this folder\" onclick=\"addNote()\">add note</button>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
