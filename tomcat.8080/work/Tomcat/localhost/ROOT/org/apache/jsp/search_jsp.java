/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-23 19:26:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import ucl.ac.uk.classes.Note;
import java.util.Map;

public final class search_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("ucl.ac.uk.classes.Note");
    _jspx_imports_classes.add("java.util.Map");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <title>search notes</title>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"");
      out.print( request.getContextPath() );
      out.write("/styles.css\">\r\n");
      out.write("  ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp", out, false);
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div>\r\n");
      out.write("  ");

    List<Map<String, Object>> notesMapList = (List<Map<String, Object>>) request.getAttribute("notesMapList");
    String sortBy = (String) request.getAttribute("sortBy");
    boolean ascending = (boolean) request.getAttribute("ascending");
    String query = (String) request.getAttribute("query");
    String parameters =  "?sort=" + sortBy + "&order=" + (ascending ? "asc" : "desc") + "&q=" + query;
  
      out.write("\r\n");
      out.write("\r\n");
      out.write("  <form action=\"");
      out.print( request.getContextPath() );
      out.write("/search");
      out.print( parameters );
      out.write("\" method=\"get\">\r\n");
      out.write("    <input type=\"hidden\" name=\"sort\" value=\"");
      out.print( sortBy );
      out.write("\">\r\n");
      out.write("    <input type=\"hidden\" name=\"order\" value=\"");
      out.print( ascending ? "asc" : "desc" );
      out.write("\">\r\n");
      out.write("    <input type=\"text\" id=\"query\" name=\"q\" value=\"");
      out.print( query );
      out.write("\" placeholder=\"enter search query\"/>\r\n");
      out.write("    <button class=\"query-button\" title=\"search notes for query\" id=\"search\">search</button>\r\n");
      out.write("  </form>\r\n");
      out.write("\r\n");
      out.write("  ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "sorting.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("  <div>\r\n");
      out.write("    <p>");
      out.print( notesMapList.size() );
      out.write(" results</p>\r\n");
      out.write("  </div>\r\n");
      out.write("\r\n");
      out.write("  <div class=\"notes\">\r\n");
      out.write("    ");

      Note note;
      String pathString;
      for (Map<String, Object> noteMap: notesMapList)
      {
        note = (Note) noteMap.get("note");
        pathString = String.join("/", (List<String>) noteMap.get("path"));
    
      out.write("\r\n");
      out.write("    <div class=\"note\">\r\n");
      out.write("      <div class=\"note-path\" style=\"color: grey; font-size: 13px;\">\r\n");
      out.write("        / ");
      out.print( pathString.replaceAll("-"," ").replaceAll("/"," / ") );
      out.write("\r\n");
      out.write("      </div>\r\n");
      out.write("      <a class=\"nice-link\" href=\"");
      out.print( request.getContextPath() );
      out.write("/displayNote/");
      out.print( pathString + "/" + note.getId());
      out.write("\" style=\"font-size: 20px; font-weight: bold;\">\r\n");
      out.write("        ");
      out.print( note.getName() );
      out.write("\r\n");
      out.write("      </a>\r\n");
      out.write("      <div class=\"note-summary\">\r\n");
      out.write("        ");
      out.print( note.getSummary() );
      out.write("\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"note-details\" style=\"color: grey; font-size: 13px; margin-top: 4px;\">\r\n");
      out.write("        created: ");
      out.print( note.getCreatedAtReadable(false) );
      out.write(" | last modified: ");
      out.print( note.getLastEditedReadable(false) );
      out.write("\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
